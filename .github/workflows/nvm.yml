name: action-test
on:
  workflow_dispatch:
    inputs:
      distinct_id:
      repo:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: echo distinct ID ${{ github.event.inputs.distinct_id }}
        run: echo ${{ github.event.inputs.distinct_id }}
      - name: Checkout student repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          path: student
          token: ${{ secrets.token }}
          fetch-depth: 0 
          
        
      - name: hub
        run: git clone https://github.com/leol0ps/hub
      - name: Checkout2
        uses: actions/checkout@v4
        with:
          path: 'problem'
          ref: 'main'
          repository: 'leol0ps/backup-tcc'
          token: '${{ secrets.BASE_REPO}}'
          persist-credentials: true
      - name: Get changed files from last commit
        id: verifica_extensoes
        run: |
          cd student/

          # Detecta modifica√ß√µes
          git fetch origin main
          if git cat-file -e ${{ github.event.before }} 2>/dev/null; then
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          else
            echo "‚ö†Ô∏è Commit anterior n√£o encontrado, pegando modifica√ß√µes do √∫ltimo commit"
            git diff --name-only HEAD~1 HEAD > changed_files.txt
          fi

          echo "üîç Arquivos modificados:"
          cat changed_files.txt

          # Verifica extens√µes permitidas no config do hub (problem/)
          cd ../problem/
          EXTENSOES=$(jq -r '.languages[].extension' config.json | paste -sd '|' -)
          echo "Extens√µes permitidas: $EXTENSOES"
          
          cd ../student/

          # Filtra apenas arquivos v√°lidos em problemas/
          grep -Ei "^problemas/.*/.*\.(${EXTENSOES})$" changed_files.txt > filtered.txt || true
          cut -d'/' -f2 filtered.txt | sort -u > exercises.txt
          echo "üìÅ Exerc√≠cios modificados:"
          cat exercises.txt || echo "(nenhum)"

          cp exercises.txt ../problem/
          cp changed_files.txt ../problem/

          # Se nenhum exerc√≠cio foi detectado, interrompe o workflow
          if [ ! -s filtered.txt ]; then
            echo "‚õî Nenhum arquivo com extens√£o permitida foi alterado. Encerrando workflow."
            exit 1
          fi

      - name: Updocker
        shell: bash
        run: |
            cp hub/docker-compose.yml problem/ 
            cd problem/
            docker pull leol0ps/boca-jail:latest
            docker compose up -d
      - name: Install dependencies
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: install
        working-directory: .
        run: |
          cd problem/
          yarn init -y
          yarn add --dev @playwright/test
          cd ..
      - name: Install Playwright Browsers
        run: npx playwright install chromium
      - name: Copy files
        run: | 
          ls
          cd student/
          cp -r problemas ../problem/ 
          cd ..
          cp hub/contest.spec.ts problem/
          cd problem/
          ls

      
          


      - name: Run test with retry
        shell: bash
        run: |
          cd problem/
          ATTEMPT=1
          MAX_ATTEMPTS=10
          set +e
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "üéØ Tentativa $ATTEMPT de $MAX_ATTEMPTS"
            npx playwright test contest.spec.ts  2>&1 | tee log.txt
      
            if grep -q "op√ß√£o(√µes) encontrada(s)" log.txt; then
              echo "‚úÖ Teste bem-sucedido!"
              break
            else
              echo "‚ùå Problema n√£o encontrado. Tentando novamente..."
              ((ATTEMPT++))
              sleep 1
            fi
            
            if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
              echo "‚ùå Erro ap√≥s $MAX_ATTEMPTS tentativas. Falhando..."
              exit 1
            fi
          done
          set -e
      - name: Log Jail Output
        run: docker logs $(docker ps -q --filter "name=boca-jail")
      - name: Commit individual para cada exerc√≠cio
        run: |
          cd student/
          git config --global user.name "leol0ps"
          git config --global user.email "leotimao2@hotmail.com"
          git remote set-url origin https://x-access-token:${{ secrets.token }}@github.com/${{ github.event.inputs.repo }}

          while IFS= read -r EXER; do
            BASE="../problem/problemas/$EXER"
            DEST="problemas/$EXER"

            RESPOSTA_FILE="$BASE/resposta.txt"
            STDOUT_FILE="$BASE/stdout.txt"
            STDERR_FILE="$BASE/stderr.txt"

            if [[ -f "$RESPOSTA_FILE" ]]; then
              mkdir -p "$DEST"
              cp "$RESPOSTA_FILE" "$DEST/resposta.txt"

              # Copiar stdout e stderr se existirem
              if [[ -f "$STDOUT_FILE" ]]; then
                cp "$STDOUT_FILE" "$DEST/stdout.txt"
                git add "$DEST/stdout.txt"
              fi

              if [[ -f "$STDERR_FILE" ]]; then
                cp "$STDERR_FILE" "$DEST/stderr.txt"
                git add "$DEST/stderr.txt"
              fi

              RAW_RESULT=$(cat "$RESPOSTA_FILE")

              if [[ "$RAW_RESULT" == "YES" ]]; then
                MESSAGE="üéà YES ‚Äì Submiss√£o aceita"
              elif [[ "$RAW_RESULT" == "" ]]; then
                MESSAGE="‚ùì Resultado n√£o encontrado no log"
              else
                MESSAGE="‚ùå $RAW_RESULT"
              fi

              git add "$DEST/resposta.txt"
              git commit --allow-empty -m "$MESSAGE"
            else
              echo "‚ö†Ô∏è Arquivo de resposta n√£o encontrado para $EXER"
            fi
          done < ../problem/exercises.txt

          git push


